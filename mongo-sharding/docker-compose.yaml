version: '3'
services:

  # сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    # запуск в режиме конфигурации
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард
  shard1_replica1:
    image: mongo:latest
    container_name: shard1-replica1
    restart: always
    ports:
      - "27011:27011"
    networks:
      app-network:
        ipv4_address: 173.17.1.1
    volumes:
      - shard1-replica1-data:/data/db
    # запуск в режиме шардинга
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27011"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард
  shard2_replica1:
    image: mongo:latest
    container_name: shard2-replica1
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.2.1
    volumes:
      - shard2-replica1-data:/data/db
    # запуск в режиме шардинга
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    # обычная mongo в режиме роутера
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  app:
    image: vskurikhin/aapp:0.0.1
    container_name: pymongo-api
    restart: always
    environment:
      MONGODB_URL: mongodb://mongos_router:27020/
      MONGODB_DATABASE_NAME: somedb
    ports:
      - "8080:8080"
    networks:
      app-network:
        ipv4_address: 173.17.0.254

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-replica1-data:
  shard2-replica1-data:
